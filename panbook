#!/bin/bash

# 超全局变量
SCRIPTDIR=`cd $(dirname $0);pwd`
CWD=`pwd`

source $SCRIPTDIR/libs/helper.sh

# recon2 方案
# 1. 使用全局数组存储 pandoc 选项，pandoc var(-V)， pandoc meta(-M)，pandoc filter（--lua-filter）以及panbook需要的变量
#    1.1 通过--option=value形式传入的panbook不能识别的参数存储到 pandoc var数组中，扔给pandoc（需要处理repeat for multiple options的情况）
# 2. panbook选项及每个模块的patch可以修改，新增或删除这些全局数组的元素
# 3. 新增函数用于拼接参数，执行pandoc时调用
# 4. 设计扩展机制：style patch控制开关，执行每个扩展目录下的脚本
# 5. 重定义名词及目录
#    5.1: templates 专指pandoc模板（--templates选项），和 样式集 区分
#    5.2: extensions 用于扩展功能，扩展
#    5.3: styles 风格，设计样式，用于定制某种模板，可以通过patch调用extension，修改全局变量，改变模板，增加lua filter等。（参数名 --style）
#         5.3.1: styles和templates要做区分，比如默认的latex模板，moderncv，elegantbook都可以调用这个模板，但是又需要不同的lua filter,文档类等

declare -A _G         # panbook全局选项
declare -A _P         # pandoc选项
declare -A _V         # pandoc var (-V)
declare -A _M         # pandoc meta (-M)
declare -A _F         # lua filter (--lua-filter)

_G=(
	[src]=src                                                         # 默认src目录名称（需要在获取参数后重置）
	[workdir]=$CWD/src                                                # 默认markdown源码目录（需要在获取参数后重置）
	[imgdir]=$CWD/src/images                                          # 默认image目录（需要在获取参数后重置）
	[crs]=$SCRIPTDIR/crs/zh-CN.yaml                                   # 默认crs配置文件（需要在获取参数后重置）
	[ofile]=`echo $CWD |awk -F '/' '{print $NF}'`                     # 默认输出文件名
	[build]=$CWD/build                                                # 默认编译目录
	[header]=add-header.tex                                           # 默认header文件名
	[extdir]=$SCRIPTDIR/extensions                                    # 扩展目录
	[tpldir]=$SCRIPTDIR/templates                                     # pandoc模板目录
	[styledir]=$SCRIPTDIR/styles                                      # styles目录
	[scriptdir]=$SCRIPTDIR
	[cwd]=$CWD
	[debug]=false
	[trace]=false
)

_P=(
	[toc]=true
	[listings]=true
	[cls]=$SCRIPTDIR/csl/chinese-gb7714-2005-numeric.csl              # 默认cls文件路径（需要在获取参数后重置）
	[bibliography]=$CWD/src/bibliography.bib                          # 默认bibliography路径（需要在获取参数后删除）
	[metadata-file]=$CWD/src/metadata.yaml                                 #默认metadata.yaml（需要在获取参数后重置）	
)
_V=()
_M=()
_F=()


# 引入函数和模块
source $SCRIPTDIR/libs/core.sh
source $SCRIPTDIR/libs/modules/*.sh
loadExtensions

if [ $# -ge 1 ];then
	[ "$1"x == "-help"x -o "$1"x == "-h"x -o "$1"x == "help"x ] && printhelp
	_G[function]=$1
	shift
else
	printhelp
fi

for i in "$@"
do
	key=$1
	case $key in
	-h|--help)
		FUNCHELP=true
		shift;;
	--style=*)
		_G[style]=${key#*=}
		shift;;
	--crs=*)
		_G[crs]=${key#*=}
		shift;;		
	-d|--debug)
		_G[debug]=true
		shift;;
	--src=*)
		_G[src]=${key#*=}
		shift;;
	--imgdir=*)
		_G[imgdir]=${key#*=}
		shift;;		
	--trace)
		_G[trace]=true
		shift;;
	-V)
		setV $2
		shift 2;;
	-M)
		setM $2
		shift 2;;
	*)
		setP $key
		shift;;
	esac
done

note "Welcome to PanBook!"

# 修正目录
fixDir

if [ "`type -t func_${func}`"x == "function"x ];then
	[ "$TRACE"x == "true"x ] && set -x
	func_${func}
else
	error "Function: $func  not defined"
fi

printGlobal
