#!/bin/bash

function getEnv() {
	env |grep -w $1 || eval $1=$2
}

cwd=`pwd`
SCRIPTDIR=`cd $(dirname $0);pwd`
ofile=`echo $cwd |awk -F '/' '{print $NF}'`
DEBUG="false"
BUILD="$cwd/build"
getEnv SRC "src"
WORKDIR="$cwd/$SRC"
METADATA="$WORKDIR/metadata.yaml"
getEnv IMGDIR "$WORKDIR/images"
highlightStyle=(pygments kate monochrome espresso haddock tango zenburn breezedark)
DATE=`date +%Y/%m/%d`
DATETIME=`date +%Y/%m/%d\ %H:%M:%S`

function meta() {
	cat $SCRIPTDIR/src/metadata.yaml
}

function init()
{
	[ ! -d $BUILD ] && mkdir $BUILD
	[ ! -d $WORKDIR ] && mkdir $WORKDIR
	[ ! -d $IMGDIR ] && mkdir $IMGDIR
	[ ! -d $cwd/templates ] && mkdir $cwd/templates
	[ ! -d $cwd/fonts ] && mkdir $cwd/fonts
	cd $WORKDIR
	
	# 模板, 支持用户自定义模板
	[ -d $SCRIPTDIR/templates/$TPL ] && cp -rfu $SCRIPTDIR/templates/$TPL/* $BUILD
	[ -d $cwd/templates/$TPL ] && cp -rfu $cwd/templates/$TPL/* $BUILD 2>/dev/null
	
	# 字体
	cp -rfu $SCRIPTDIR/fonts $BUILD
	[ -d $cwd/fonts ] && cp -rfu $cwd/fonts/* $BUILD/fonts/ 2>/dev/null
	
	# 前言和后记部分
	[ ! -f frontmatter.md ] && touch frontmatter.md
	[ ! -f backmatter.md ] && touch backmatter.md
	[ ! -f metadata.yaml ] && meta > metadata.yaml
	chapters=`ls *.md |grep -vE "frontmatter|backmatter" 2>/dev/null`
	[ "$DEBUG"x = "true"x ] && highlightStyle=(tango)
}

function pdf()
{
	getEnv TPL "ctex"
	echo $TPL
	init  # 首先初始化
	
	# 判断设备类型
	getEnv DEVICE "pc"
	
	# elegantbook 模板选项
	getEnv ELEGANT "cn"
	
	# 复制$SRC目录下资源文件到build目录
	cp -rf $WORKDIR/* $BUILD
	cd $BUILD
	# 生成前言和后记
	pandoc -t latex frontmatter.md --top-level-division=chapter --listings -o frontmatter.tex
	pandoc -t latex backmatter.md --top-level-division=chapter --listings -o backmatter.tex
	
	source $SCRIPTDIR/config.default		
	[ -f $cwd/config ] && source $cwd/config
	
	TEX_OUTPUT="$ofile-$TPL-$DEVICE.tex"
	pandoc $chapters -o $TEX_OUTPUT $PDF_OPTIONS --include-before=frontmatter.tex --include-after=backmatter.tex --metadata-file=$METADATA --template=$cwd/build/$TPL.tpl -V device=$DEVICE -V elegantoption=$ELEGANT -V date="\today"
	
	#sed -i 's/\DefineVerbatimEnvironment{Highlighting}.*/\DefineVerbatimEnvironment{Highlighting}{Verbatim}{commandchars=\\\\\\{\\},fontsize=\\small,xleftmargin=3mm,frame=lines}/g' $TEX_OUTPUT
	sed -i -E "/begin\{lstlisting.*label.*\]/ s/caption=(.*)?,\s*label=(.*)\]/caption=\1, label=\2, float=htbp\]/" $TEX_OUTPUT
	sed -i -E "/begin\{lstlisting.*label.*\]/ s/\[label=(.*)?\]/\[label=\1, caption=\1, float=htbp\]/" $TEX_OUTPUT
	#sed -i -E "s/begin\{lstlisting\}$/begin\{lstlisting\}\[float=htbp\]/g" $TEX_OUTPUT
	#sed -i "s/\.jpg/\.eps/g" $TEX_OUTPUT
	
	# gif格式图片编译报错，需要引用eps格式，需转换后使用
	sed -i -r "s#(\includegraphics\{.*?).(gif)(\})#\1.eps\3#g" $TEX_OUTPUT
	
	# 网络图片需要替换为本地文件
	sed -i -r "s#(\includegraphics\{)http(s)?://(.*)#\1$IMGDIR/\3#g" $TEX_OUTPUT
	
	xelatex -output-directory=$BUILD $TEX_OUTPUT #1&>/dev/null
	xelatex -output-directory=$BUILD $TEX_OUTPUT #1&>/dev/null
	
	clean
}

# 保存网络图片至本地
function saveimg() 
{
	cd $IMGDIR
	for item in `ls $WORKDIR/*.md`;do
		for url in `grep -E "^\!\[.*?\]\(http(s)?://.*\)" $item |awk -F"(" '{print $2}' |tr -d ')'`;do
			wget -m -np $url
			localpath=`echo $url |sed -r 's#http(s)?://##g'`
			echo $localpath |grep -E "\.gif$" && r=0 || r=1
			if [ $r -eq 0 ];then
				new=`echo $localpath |sed -r "s/\.gif$//g"`
				/mingw64/bin/convert $localpath $new.eps
				mv $new-0.eps $new.eps 2>/dev/null
				rm -f $new-*.eps
			fi
		done
	done
	cd $cwd
}

function toeps()
{
	cd $IMGDIR
	for item in `ls *.$1`;do
		new=`echo $item |sed -r "s/.$1$//g"`
		/mingw64/bin/convert $item $new.eps
		mv $new-0.eps $new.eps 2>/dev/null
		rm -f $new-*.eps
	done
	cd $cwd
}

# 转换为eps格式
function eps()
{
	toeps gif
}

function pdf2jpg()
{
	for id in $chapters frontmatter.md backmatter.md;do
		cp $id $id.tmp
		sed -i -r 's/(!\[.*?\]\(.*?)(\.pdf\))/\1.jpg)/g' $id.tmp
	done
	
	tmp_chapters="frontmatter.md.tmp "`ls *.md.tmp |grep -vE "frontmatter.md.tmp|backmatter.md.tmp"`" backmatter.md.tmp"
}

function html()
{	
	getEnv TPL "html5"
	init
	pdf2jpg # html中使用jpg图片，因此需要为pdf格式的插图准备同名jpg
	for theme in ${highlightStyle[@]}
	do
		source $SCRIPTDIR/config.default
		[ -f $cwd/config ] && source $cwd/config
	
		HTML_OUTPUT="$BUILD/$ofile-$TPL-$theme.html"
		pandoc --self-contained $tmp_chapters -o $HTML_OUTPUT $HTML_OPTIONS --metadata-file=$METADATA --template=$cwd/build/$TPL.tpl
		#sed -i "s/pdf/jpg/g" $HTML_OUTPUT
	done
	
	for id in $tmp_chapters;do
		rm -f $id;
	done
}

function epub()
{
	getEnv TPL "epub"
	getEnv CSS "epub"
	addCss=""
	[ "$CSS"x != ""x ] && addCss="--css=$BUILD/css/$CSS.css"
	
	init
	pdf2jpg		

	merge="/tmp/epub-meta-"`echo $RANDOM$RANDOM$RANDOM$RANDOM`
	cat $METADATA > $merge
	echo -e "\n\n\n" >> $merge
	cat $WORKDIR/frontmatter.md.tmp >> $merge
	mv $merge $WORKDIR/frontmatter.md.tmp

	for theme in ${highlightStyle[@]}
	do
		source $SCRIPTDIR/config.default
		[ -f $cwd/config ] && source $cwd/config
		EPUB_OUTPUT="$BUILD/$ofile-$TPL-$theme.epub"
		pandoc $tmp_chapters -o $EPUB_OUTPUT $EPUB_OPTIONS --template=$cwd/build/$TPL.tpl $addCss --metadata date="$DATETIME"
	done
	
	for id in $tmp_chapters;do
		rm -f $id;
	done	
}

function clean() {
	cd $BUILD
	rand=`echo $RANDOM$RANDOM$RANDOM$RANDOM`
	release="/tmp/release-$rand"
	mkdir $release
	mv *.pdf *.tex *.epub *.html $release 2>/dev/null
	rm -fr *
	mv $release/* .
	rm -fr $release
}

function cleanall()
{
	cd $BUILD
	rm -fr *
}

function printhelp() {
	echo -e "  eBook maker base pandoc\n"
	echo -e "\tpanbook init        initialize work environment"
	echo -e "\tpanbook pdf         make pdf ebook"
	echo -e "\tpanbook html        make html ebook"
	echo -e "\tpanbook epub        make epub ebook"
	echo -e "\tpanbook help        print help info"
	echo -e "\tpanbook saveimg     save image url to local"
	echo -e "\tpanbook eps         convert gif to eps"
}

case $# in
	0) printhelp;;
	1) [ $1 == "help" ] && printhelp  || eval `echo $1`;;
	2) [ "$2"x = "d"x ] && DEBUG="true";eval `echo $1`;;
	*) printhelp;;
esac
